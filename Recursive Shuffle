/*
Recursive Shuffle
Time limit: 1000 ms
Memory limit: 128 MB

We can perform the following algorithm on an array of size greater than 11: take the elements on even positions and move them at the beginning of the array. 
After this step call the algorithm recursively for the prefix determined by the elements which were initially on even positions and the suffix determined by the elements which were initially on odd positions.

For example, let's consider the array a\ b\ c\ da b c d. After the first step the array becomes b\ d\ a\ cb d a c. 
We make a recursive call on the first two elements and get d\ b\ a\ cd b a c. 
Next we make another call on the last two elements and get d\ b\ c\ ad b c a.

Let's take an array vv of size NN such that v[i] = iv[i]=i, for all ii and apply this algorithm on it. 
You are given another array uu of size MM. Check if vv contains a subarray equal to uu.

Standard input
The first line contains two integer values NN and MM.

The second line contains MM integers representing the array uu.

Standard output
The output should contain a single integer: 11 if uu can be found as a subarray of vv, or 00 otherwise.

Constraints and notes
1 \leq N \leq 10^91≤N≤10
​9
​​ 
1 \leq M \leq 10^51≤M≤10
​5
​​ 
The elements of uu are between 11 and NN
*/


#include <stdio.h>

void algorithm(int* array, int n); 
int find(int* v, int* u, int n, int m);
void fill(int * p);
void stack(int* p, int n);
int l = 0;

int main() {
    
    int n_size, m_size;
    scanf("%i %i", &n_size, &m_size);
    
    int v[n_size];
    int u[m_size];
    
    fill(u);
    stack(v, n_size);
    algorithm(v, n_size);
    
    printf("%i", find(v, u, n_size, m_size));
    return 0;
}

void algorithm(int* array, int n) {
    int b_size; 
    if(n % 2 == 0)
        b_size = n/2;
    else
        b_size = n/2 +1;
        
    int a[n/2];
    int b[b_size];
    int k = 1, a_i = 0, b_i = 0, i = 0;
    
    while(i < n) {
       if(k % 2 == 0) {
           a[a_i] = array[i];
           a_i++;
       }
       else {
           b[b_i] = array[i];
           b_i++;
       }
       k++;
       i++;
    }
    
    if(b_size != 1)
    {
        algorithm(b, b_size);
    }
    
    if( sizeof(a)/sizeof(int) != 1)
    {
        algorithm(a, sizeof(a)/sizeof(int));
    }
    
    if( l != 1) {
    i = 0;
    while(i < (sizeof(a)/sizeof(int))) {
        array[i] = a[i]; 
        i++;
    }
 
    k = 0;
    while(k < b_size) {
        array[i++] = b[k];
        k++;
    }   
    }
        
}

int find(int* v, int* u, int n, int m ) {
    for(int i =0; i < n; i++) {
        int k = 0;
        while(v[i]==u[k]) {
            k++;
            i++;
            if(k == m) {
                return 1;
            }
            
        }
    }
    return 0;
}


void fill(int * p) {
    int n = 1, i = 0, k =0;
    while(n == 1) {
        n = scanf("%i", &i);
        p[k++] = i;
    }
}


void stack(int* p, int n) {
    for(int i = 0; i < n; i++) {
        p[i] = i+1;
    }
}
